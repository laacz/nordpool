package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"time"
)

type PageData struct {
	Locale          *Locale
	CountryConfigs  map[string]CountryConfig
	WithVAT         bool
	Resolution      int
	QuartersPerHour int
	Today           map[int]map[int]*float64
	Tomorrow        map[int]map[int]*float64
	TodayAvg        *float64
	TomorrowAvg     *float64
	TodayMin        float64
	TodayMax        float64
	TomorrowMin     float64
	TomorrowMax     float64
	CurrentTime     time.Time
	Legend          []string
	ValuesJSON      map[string][]float64
	GoodColor       RGB
	BadColor        RGB
	ShowNotice      bool
	IsLocalhost     bool
}

templ Index(data PageData) {
	<!DOCTYPE html>
	<html lang={ data.Locale.Config.CodeLC }>
		<head>
			<!-- Google tag (gtag.js) -->
			<script async src="https://www.googletagmanager.com/gtag/js?id=G-CRFT0MS7XN"></script>
			<script>
			window.dataLayer = window.dataLayer || [];
			function gtag() {
				dataLayer.push(arguments);
			}
			gtag('js', new Date());
			gtag('config', 'G-CRFT0MS7XN');
		</script>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"/>
			<meta http-equiv="X-UA-Compatible" content="ie=edge"/>
			<title>{ data.Locale.Msg("title") }</title>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Fira+Sans:wght@100;400;700&display=swap" rel="stylesheet"/>
			<script src="/echarts.min.js"></script>
			@styles(data)
		</head>
		<body class={ templ.KV("res-60", data.Resolution == 60) }>
			<div id="app">
				@header(data)
				if data.ShowNotice {
					<div class="notice">
						<p>{ data.Locale.Msg("15min notice") }</p>
					</div>
				}
				if !data.IsLocalhost && data.Locale.Config.Code == "LV" {
					<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4590024878280519" crossorigin="anonymous"></script>
					<!-- nordpool header -->
					<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-4590024878280519" data-ad-slot="9106834831" data-ad-format="auto" data-full-width-responsive="true"></ins>
					<script>
					(adsbygoogle = window.adsbygoogle || []).push({});
				</script>
				}
				@desktopTable(data)
				@mobileTables(data)
				<p id="legend">
					<span class="legend bad">{ data.Locale.Msg("IzvairƒÅmies tƒìrƒìt elektrƒ´bu") }</span>
					<span class="legend good">{ data.Locale.Msg("KrƒÅjam burci≈ÜƒÅ") }</span>
				</p>
				@chartSection(data)
				@footer(data)
				@scripts(data)
			</div>
		</body>
	</html>
}

templ styles(data PageData) {
	<style>
		body {
			font-family: 'fira sanss', sans-serif;
		}
		header h1 {
			font-size: 2rem;
			text-align: left;
			white-space: nowrap;
		}
		footer {
			border-top: 1px solid #aaa;
			padding: 0 .5rem;
			margin-top: 2em;
		}
		.notice {
			background-color: #e3f2fd;
			border-left: 4px solid #2196f3;
			padding: 16px 20px;
			margin: 16px 0;
			border-radius: 4px;
			box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
		}
		.notice p {
			margin: 0;
			color: #1565c0;
			font-size: 14px;
			line-height: 1.5;
		}
		#app footer p {
			font-size: smaller;
			text-align: left;
		}
		#legend {
			text-align: center;
			font-size: smaller;
		}
		.help {
			font-weight: 400;
			display: block;
			font-size: 80%;
		}
		#app {
			width: 50rem;
			max-width: 95%;
			margin: 0 auto;
		}
		#app p {
			line-height: 1.5;
		}
		table {
			table-layout: fixed;
			width: 100%;
			border-collapse: collapse;
			margin: 0 auto;
		}
		th, td {
			padding: 5px 10px;
			border: 2px solid #fff;
		}
		table th {
			white-space: nowrap;
		}
		tr.now {
			outline: 3px solid #f00;
		}
		td.now-quarter {
			outline: 3px solid #ff0;
			outline-offset: -3px;
		}
		td.tomorrow.quarter-0 {
			border-left: 10px solid #fff;
		}
		.price {
			text-align: right;
			color: #fff;
			font-family: 'consolas', monospace;
		}
		th small span {
			font-family: 'consolas', monospace;
		}
		.legend {
			display: inline-block;
			padding: 5px 10px;
		}
	</style>
	@templ.Raw(fmt.Sprintf(`<style>
		.good {
			background-color: rgb(%d,%d,%d);
			color: #fff;
		}
		.bad {
			background-color: rgb(%d,%d,%d);
			color: #fff;
		}
	</style>`, data.GoodColor.R, data.GoodColor.G, data.GoodColor.B, data.BadColor.R, data.BadColor.G, data.BadColor.B))
	<style>
		.extra-decimals {
			opacity: .4;
			font-size: 70%;
		}
		header {
			display: grid;
			grid-template-columns: 1fr auto;
		}
		header p {
			text-align: right;
			font-size: smaller;
		}
		.flag {
			height: 1.5em;
			margin: 0 .2em;
		}
		#chart {
			height: 400px;
			margin: 0 auto;
		}
		#chart-selector {
			margin: 1em 0;
			display: grid;
			grid-template-columns: 1fr auto;
		}
		#chart-selector a {
			display: inline-block;
			text-align: center;
			font-size: 1rem;
			font-weight: 600;
			border-radius: 8px;
			margin: 0 .3em;
			padding: 0.5em 1em;
			background-color: #f0f0f0;
			color: #333;
			text-decoration: none;
			transition: background-color 0.3s, color 0.3s;
		}
		#chart-selector a:hover,
		#chart-selector a[data-current] {
			background-color: #333;
			color: #fff;
		}
		.mobile-tables {
			display: none;
		}
		.mobile-table {
			margin-bottom: 2em;
		}
		.mobile-table.hidden {
			display: none;
		}
		#mobile-selector {
			margin: 1em 0;
			text-align: center;
		}
		#mobile-selector a {
			display: inline-block;
			text-align: center;
			font-size: 1rem;
			font-weight: 600;
			border-radius: 8px;
			margin: 0 .3em;
			padding: 0.5em 1em;
			background-color: #f0f0f0;
			color: #333;
			text-decoration: none;
			transition: background-color 0.3s, color 0.3s;
		}
		#mobile-selector a:hover,
		#mobile-selector a[data-current] {
			background-color: #333;
			color: #fff;
		}
		@media (max-width: 768px) {
			body:not(.res-60) .desktop-table {
				display: none;
			}
			body:not(.res-60) .mobile-tables {
				display: block;
			}
			body.res-60 .mobile-tables {
				display: none;
			}
			#chart-selector {
				display: none;
			}
		}
	</style>
}

templ header(data PageData) {
	<header>
		<h1>
			üîåüè∑Ô∏è
			<br/>
			‚Ç¨/kWh
		</h1>
		<p>
			@buildFlagLink(countryConfigs["LV"])
			@buildFlagLink(countryConfigs["LT"])
			@buildFlagLink(countryConfigs["EE"])
			<br/>
			{ data.Locale.Msg("subtitle") }
			<br/>
			if data.WithVAT {
				@templ.Raw(fmt.Sprintf("%s %.0f%%", data.Locale.Msg("it is with VAT"), data.Locale.Config.VAT*100))
				(<a href={ templ.URL(buildVATLink(data.Locale, data.Resolution, false)) }>{ data.Locale.Msg("show without VAT") }</a>)
			} else {
				@templ.Raw(fmt.Sprintf("%s %.0f%%", data.Locale.Msg("it is without VAT"), data.Locale.Config.VAT*100))
				(<a href={ templ.URL(buildVATLink(data.Locale, data.Resolution, true)) }>{ data.Locale.Msg("show with VAT") }</a>)
			}
			<br/>
			if data.Resolution == 15 {
				{ data.Locale.Msg("Resolution") }: <strong>15min</strong>
				(<a href={ templ.URL(buildResolutionLink(data.Locale, data.WithVAT, 60)) }>{ data.Locale.Msg("show 1h") }</a>)
			} else {
				{ data.Locale.Msg("Resolution") }: <strong>1h</strong>
				(<a href={ templ.URL(buildResolutionLink(data.Locale, data.WithVAT, 15)) }>{ data.Locale.Msg("show 15min") }</a>)
			}
		</p>
	</header>
}

templ desktopTable(data PageData) {
	<table class="desktop-table">
		<thead>
			<tr>
				<th></th>
				<th colspan={ fmt.Sprintf("%d", data.QuartersPerHour) }>
					{ data.Locale.Msg("≈†odien") }
					<span class="help">{ data.Locale.FormatDate(data.CurrentTime, "d. MMM") }</span>
					<br/>
					<small>
						{ data.Locale.Msg("Vidƒìji") }
						<span>
							@formatAvg(data.TodayAvg)
						</span>
					</small>
				</th>
				<th colspan={ fmt.Sprintf("%d", data.QuartersPerHour) }>
					{ data.Locale.Msg("Rƒ´t") }
					<span class="help">{ data.Locale.FormatDate(data.CurrentTime.Add(24*time.Hour), "d. MMM") }</span>
					<br/>
					<small>
						{ data.Locale.Msg("Vidƒìji") }
						<span>
							@formatAvg(data.TomorrowAvg)
						</span>
					</small>
				</th>
			</tr>
			<tr>
				<th>üïë</th>
				if data.Resolution == 15 {
					<th>:00</th>
					<th>:15</th>
					<th>:30</th>
					<th>:45</th>
					<th>:00</th>
					<th>:15</th>
					<th>:30</th>
					<th>:45</th>
				} else {
					<th>:00</th>
					<th>:00</th>
				}
			</tr>
		</thead>
		<tbody>
			for hour := 0; hour < 24; hour++ {
				<tr data-hours={ fmt.Sprintf("%d", hour) }>
					<th>{ fmt.Sprintf("%02d-%02d", hour, (hour+1)%24) }</th>
					@renderPriceCells(data.Today[hour], data.TodayMin, data.TodayMax, data.QuartersPerHour, "today")
					@renderPriceCells(data.Tomorrow[hour], data.TomorrowMin, data.TomorrowMax, data.QuartersPerHour, "tomorrow")
				</tr>
			}
		</tbody>
	</table>
}

templ mobileTables(data PageData) {
	<div class="mobile-tables">
		if data.Resolution == 15 {
			<div id="mobile-selector">
				<a href="#" data-day="today" data-current="">{ data.Locale.Msg("≈†odien") }</a>
				<a href="#" data-day="tomorrow">{ data.Locale.Msg("Rƒ´t") }</a>
			</div>
		}
		<table class="mobile-table" data-day="today">
			<thead>
				<tr>
					<th colspan={ fmt.Sprintf("%d", data.QuartersPerHour+1) }>
						{ data.Locale.Msg("≈†odien") }
						<span class="help">{ data.Locale.FormatDate(data.CurrentTime, "d. MMM") }</span>
						<br/>
						<small>
							{ data.Locale.Msg("Vidƒìji") }
							<span>
								@formatAvg(data.TodayAvg)
							</span>
						</small>
					</th>
				</tr>
				<tr>
					<th>üïë</th>
					if data.Resolution == 15 {
						<th>:00</th>
						<th>:15</th>
						<th>:30</th>
						<th>:45</th>
					} else {
						<th>:00</th>
					}
				</tr>
			</thead>
			<tbody>
				for hour := 0; hour < 24; hour++ {
					<tr data-hours={ fmt.Sprintf("%d", hour) } data-day="today">
						<th>{ fmt.Sprintf("%02d-%02d", hour, (hour+1)%24) }</th>
						@renderPriceCells(data.Today[hour], data.TodayMin, data.TodayMax, data.QuartersPerHour, "")
					</tr>
				}
			</tbody>
		</table>
		<table class={ buildMobileTableClass(data.Resolution) } data-day="tomorrow">
			<thead>
				<tr>
					<th colspan={ fmt.Sprintf("%d", data.QuartersPerHour+1) }>
						{ data.Locale.Msg("Rƒ´t") }
						<span class="help">{ data.Locale.FormatDate(data.CurrentTime.Add(24*time.Hour), "d. MMM") }</span>
						<br/>
						<small>
							{ data.Locale.Msg("Vidƒìji") }
							<span>
								@formatAvg(data.TomorrowAvg)
							</span>
						</small>
					</th>
				</tr>
				<tr>
					<th>üïë</th>
					if data.Resolution == 15 {
						<th>:00</th>
						<th>:15</th>
						<th>:30</th>
						<th>:45</th>
					} else {
						<th>:00</th>
					}
				</tr>
			</thead>
			<tbody>
				for hour := 0; hour < 24; hour++ {
					<tr data-hours={ fmt.Sprintf("%d", hour) } data-day="tomorrow">
						<th>{ fmt.Sprintf("%02d-%02d", hour, (hour+1)%24) }</th>
						@renderPriceCells(data.Tomorrow[hour], data.TomorrowMin, data.TomorrowMax, data.QuartersPerHour, "")
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ renderPriceCells(quarters map[int]*float64, min, max float64, quartersPerHour int, dayClass string) {
	@renderPriceCellsHelper(quarters, min, max, quartersPerHour, dayClass)
}

templ renderPriceCell(value *float64, min, max float64, quarter, colspan int, dayClass string) {
	<td
		class={ fmt.Sprintf("price %s quarter-%d", dayClass, quarter) }
		data-quarter={ fmt.Sprintf("%d", quarter) }
		if colspan > 1 {
			colspan={ fmt.Sprintf("%d", colspan) }
		}
		if value != nil {
			style={ fmt.Sprintf("background-color: %s", GetColorPercentage(*value, min, max)) }
		} else {
			style={ fmt.Sprintf("text-align: center; background-color: %s", GetColorPercentage(-9999, min, max)) }
		}
	>
		if value != nil {
			@templ.Raw(FormatPrice(*value))
		} else {
			-
		}
	</td>
}

templ chartSection(data PageData) {
	<div id="chart-selector">
		<h2>{ data.Locale.Msg("Primitƒ´vs grafiks") }</h2>
		<p>
			<a href="#" data-day="today" data-current="">{ data.Locale.Msg("≈†odien") }</a>
			<a href="#" data-day="tomorrow">{ data.Locale.Msg("Rƒ´t") }</a>
		</p>
	</div>
	<div id="chart"></div>
}

templ footer(data PageData) {
	<footer>
		<p>
			if data.WithVAT {
				{ data.Locale.Msg("Price shown includes VAT") }
				(<a href={ templ.URL(data.Locale.Route("/")) }>{ data.Locale.Msg("show without VAT") }</a>).
			} else {
				{ data.Locale.Msg("Price shown is without VAT") }
				(<a href={ templ.URL(data.Locale.Route("/?vat")) }>{ data.Locale.Msg("show with VAT") }</a>).
			}
			@templ.Raw(data.Locale.Msgf(
				"disclaimer",
				data.Locale.Msg("normal CSV")+
					` (<a href="/nordpool-`+data.Locale.Config.CodeLC+`.csv">`+data.Locale.Msg("15min data")+`</a>, `+
					`<a href="/nordpool-`+data.Locale.Config.CodeLC+`-1h.csv">`+data.Locale.Msg("1h average")+`</a>)`,
				data.Locale.Msg("Excel CSV")+
					` (<a href="/nordpool-`+data.Locale.Config.CodeLC+`-excel.csv">`+data.Locale.Msg("15min data")+`</a>, `+
					`<a href="/nordpool-`+data.Locale.Config.CodeLC+`-1h-excel.csv">`+data.Locale.Msg("1h average")+`</a>)`,
			))
		</p>
	</footer>
}

templ scripts(data PageData) {
	@templ.Raw(fmt.Sprintf("<script type=\"text/javascript\">const legendData = %s; const todayData = %s; const tomorrowData = %s; const avgLabel = %s;</script>",
		marshalJSON(data.Legend),
		marshalJSON(data.ValuesJSON["today"]),
		marshalJSON(data.ValuesJSON["tomorrow"]),
		marshalJSON(data.Locale.Msg("Vidƒìji"))))
	<script type="text/javascript">
		const chart = echarts.init(document.getElementById('chart'));
		const option = {
			animation: false,
			renderer: 'svg',
			legend: {
				show: false
			},
			grid: {
				top: 50,
				left: 40,
				right: 10,
				bottom: 20
			},
			title: {
				show: false,
			},
			tooltip: {
				trigger: 'axis',
				formatter: function (params) {
					let timeLabel = params[0].name;
					let value = parseFloat(params[0].value);
					let strValue = value.toString().padEnd(4, '0').substring(0, 4);
					strValue += '<small>';
					strValue += value.toString().substring(4).padEnd(2, '0');
					strValue += '</small> ‚Ç¨/kWh'
					let [hour, minute] = timeLabel.split(':').map(n => parseInt(n, 10));
					let endMinute = (minute + 15) % 60;
					let endHour = (minute + 15 >= 60) ? (hour + 1) % 24 : hour;
					return `
						${ timeLabel } - ${ ('' + endHour).padStart(2, '0') }:${ ('' + endMinute).padStart(2, '0') }<br/>
						${ strValue }
					`;
				},
				axisPointer: {
					type: 'cross',
					snap: true,
				},
			},
			xAxis: {
				type: 'category',
				data: legendData,
				boundaryGap: false,
				axisLabel: {
					formatter: function (value) {
						let hour = value.split(':')[0];
						return hour;
					},
					interval: function (index, value) {
						return value.endsWith(':00');
					}
				},
				splitLine: {
					show: true,
					interval: 0,
					lineStyle: {
						type: 'dashed',
					},
				},
			},
			yAxis: {
				type: 'value',
				axisLabel: {
					formatter: function (value) {
						return parseFloat(value).toFixed(2)
					}
				},
			},
			series: [
				{
					name: '‚Ç¨/kWh',
					type: 'line',
					step: 'end',
					symbol: 'none',
					data: todayData,
					markPoint: {
						data: [
							{
								type: 'max',
								name: 'Max',
								symbolOffset: [0, -10],
								itemStyle: {
									color: '#a00',
								}
							},
							{
								type: 'min',
								name: 'Min',
								symbolOffset: [0, 10],
								itemStyle: {
									color: '#0a0',
								}
							}
						],
						symbol: 'rect',
						symbolSize: [40, 15],
						label: {
							color: '#fff',
							formatter: function (value) {
								return (Math.round(parseFloat(value.value) * 100) / 100).toFixed(2)
							}
						}
					},
					markLine: {
						data: [{type: 'average', name: avgLabel}],
						symbol: 'none',
						label: {
							show: true,
							position: "insideStartTop",
							backgroundColor: "rgba(74, 101, 186, .3)",
							padding: [3, 3],
						}
					}
				},
			]
		};
		chart.setOption(option);
		const dataset = {
			'today': todayData,
			'tomorrow': tomorrowData,
		};
	</script>
	<script>
		document.addEventListener('DOMContentLoaded', () => {
			let hours = null;
			let quarter = null;
			(function updateNow() {
				const now = new Date();
				const currentHours = now.getHours();
				const currentQuarter = Math.floor(now.getMinutes() / 15);
				if (hours !== currentHours || quarter !== currentQuarter) {
					Array.from(document.querySelectorAll('[data-hours]')).forEach((row) => {
						row.classList.remove('now');
					})
					Array.from(document.querySelectorAll('td.price')).forEach((cell) => {
						cell.classList.remove('now-quarter');
					})
					const desktopRow = document.querySelector('.desktop-table tr[data-hours="' + currentHours + '"]');
					if (desktopRow) {
						desktopRow.classList.add('now');
						const allCells = desktopRow.querySelectorAll('td.price');
						if (allCells[currentQuarter]) {
							allCells[currentQuarter].classList.add('now-quarter');
						}
					}
					const mobileRow = document.querySelector('.mobile-table tr[data-hours="' + currentHours + '"][data-day="today"]');
					if (mobileRow) {
						mobileRow.classList.add('now');
						const quarterCells = mobileRow.querySelectorAll('td.price');
						if (quarterCells[currentQuarter]) {
							quarterCells[currentQuarter].classList.add('now-quarter');
						}
					}
					hours = currentHours;
					quarter = currentQuarter;
				}
				setTimeout(updateNow, 1000);
			})()
			document.querySelectorAll('#chart-selector a').forEach(element => element.addEventListener('click', (e) => {
				e.preventDefault();
				const day = e.target.dataset.day;
				chart.setOption({
					series: [{
						data: dataset[day],
					}]
				});
				document.querySelectorAll('#chart-selector a').forEach((el) => {
					el.removeAttribute('data-current');
				})
				e.target.setAttribute('data-current', true);
			}))
			document.querySelectorAll('#mobile-selector a').forEach(element => element.addEventListener('click', (e) => {
				e.preventDefault();
				const day = e.target.dataset.day;
				document.querySelectorAll('.mobile-table').forEach((table) => {
					if (table.dataset.day === day) {
						table.classList.remove('hidden');
					} else {
						table.classList.add('hidden');
					}
				})
				chart.setOption({
					series: [{
						data: dataset[day],
					}]
				});
				document.querySelectorAll('#mobile-selector a').forEach((el) => {
					el.removeAttribute('data-current');
				})
				e.target.setAttribute('data-current', true);
			}))
		})
	</script>
}

func formatAvg(avg *float64) templ.Component {
	if avg == nil {
		return templ.Raw("‚Äî")
	}
	return templ.Raw(FormatPrice(*avg))
}

func buildFlagLink(config CountryConfig) templ.Component {
	href := "/"
	if config.CodeLC != "lv" {
		href = "/" + config.CodeLC
	}
	return templ.Raw(fmt.Sprintf(`<a class="flag" href="%s"><img src="/%s.svg" alt="%s" width="32" height="32"/></a>`,
		href, config.CodeLC, config.Name))
}

func buildVATLink(locale *Locale, resolution int, withVAT bool) string {
	base := locale.Route("/")
	if withVAT {
		base += "?vat"
		if resolution == 60 {
			base += "&res=60"
		}
	} else {
		if resolution == 60 {
			base += "?res=60"
		}
	}
	return base
}

func buildResolutionLink(locale *Locale, withVAT bool, resolution int) string {
	base := locale.Route("/")
	if withVAT && resolution == 60 {
		return base + "?vat&res=60"
	} else if withVAT {
		return base + "?vat"
	} else if resolution == 60 {
		return base + "?res=60"
	}
	return base
}

func buildMobileTableClass(resolution int) string {
	if resolution == 15 {
		return "mobile-table hidden"
	}
	return "mobile-table"
}

func renderPriceCellsHelper(quarters map[int]*float64, min, max float64, quartersPerHour int, dayClass string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		q := 0
		for q < quartersPerHour {
			value := quarters[q]
			// Count consecutive quarters with same value for colspan
			colspan := 1
			nextQ := q + 1
			for nextQ < quartersPerHour {
				nextValue := quarters[nextQ]
				if value != nil && nextValue != nil && *value == *nextValue {
					colspan++
					nextQ++
				} else {
					break
				}
			}
			if err := renderPriceCell(value, min, max, q, colspan, dayClass).Render(ctx, w); err != nil {
				return err
			}
			q = nextQ
		}
		return nil
	})
}

func marshalJSON(v interface{}) string {
	b, _ := json.Marshal(v)
	return string(b)
}

script marshalJSONScript(v interface{}) {
	return json.Marshal(v)
}
